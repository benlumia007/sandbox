#!/bin/bash

#!/bin/bash

get_config_file="/srv/.global/custom.yml"

db_restores=`cat ${get_config_file} | shyaml get-value options.db_restores 2> /dev/null`

get_sites() {
    local value=`cat ${get_config_file} | shyaml keys sites 2> /dev/null`
    echo ${value:-$@}
}

# noroot
#
# noroot allows provision scripts to be run as the default user "vagrant" rather than the root
# since provision scripts are run with root privileges.
noroot() {
    sudo -EH -u "vagrant" "$@";
}

# $db_restores ( true or false )
#
# when db_restores set as true or false, it is taken from the main file of sanbox-custom.yml's
# options features. when set to true, it will then import database to the correct user when set
# to false, then it will skip database importing.
if [[ $db_restores == "False"  ]]; then
    exit;
fi

# /srv/database/backups
#
# this is where all the database of *.sql will be located when you do a vagrant halt or vagrant
# destroy, it wil then back up the database depending on how much sites you have generated.
cd /srv/database/backups/

# site in `get_sites`
#
# this is a for loop where it grabs information from sandbox-custom.yml and displays the site's
# site so that database an be imported when value is set to true.
for site in `get_sites`; do
    get_custom_type() {
        local value=`cat ${get_config_file} | shyaml get-value sites.${site}.custom.type 2> /dev/null`
        echo ${value:-$@}
    }

    type=`get_custom_type`

    if [[ "ClassicPress" == ${type} ]]; then
        mysql -u root -e "CREATE DATABASE IF NOT EXISTS ${site};"
        mysql -u root -e "CREATE USER IF NOT EXISTS 'classicpress'@'%' IDENTIFIED WITH 'mysql_native_password' BY 'classicpress';"
        mysql -u root -e "GRANT ALL PRIVILEGES ON ${site}.* to 'classicpress'@'%' WITH GRANT OPTION;"
        mysql -u root -e "FLUSH PRIVILEGES;"
    else
        mysql -u root -e "CREATE DATABASE IF NOT EXISTS ${site};"
        mysql -u root -e "CREATE USER IF NOT EXISTS 'wordpress'@'%' IDENTIFIED WITH 'mysql_native_password' BY 'wordpress';"
        mysql -u root -e "GRANT ALL PRIVILEGES ON ${site}.* to 'wordpress'@'%' WITH GRANT OPTION;"
        mysql -u root -e "FLUSH PRIVILEGES;"
    fi
done

# count
#
# ahh, so this is interesting one, count will find all of the *.sql and show how many, for example
# if there is 3 files then it will list 3, this allows us to do the next part.
count=`ls -1 *.sql 2>/dev/null | wc -l`

# $count != 0
#
# apparently, when you vagrant halt or vagrant destroy, it will then back up the database and will
# use mysqldump to generate a *.sql. so if you have 1 or more sites then it will start importing
# database.
if [[ $count != 0 ]]; then
    for file in $( ls *.sql )
    do
        domain=${file%%.sql}
        database=`noroot mysql -u root --skip-column-names -e "SHOW TABLES FROM $domain"`

        if [[ "" == "$database" ]]; then
            noroot mysql -u root $domain < $domain.sql
        fi
    done
fi
